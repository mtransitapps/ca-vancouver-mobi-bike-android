apply plugin: 'com.android.application'

dependencies {
    implementation project(':commons-android')
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    Properties projectNameProperties = new Properties()
    projectNameProperties.load(new FileInputStream(file("project_name.properties")))

    def projectName = projectNameProperties["project.name"]

    Properties versionProperties = new Properties()
    versionProperties.load(new FileInputStream(file("version.properties")))

    def useGooglePlayUploadKeysProperties = true

    Properties appSigningKeysProperties = new Properties()
    def appSigningKeysPropertiesFile = file("app-signing-release-keys.properties")
    if (appSigningKeysPropertiesFile.exists()) {
        appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
    } else {
        appSigningKeysPropertiesFile = file("../app-signing-release-keys.properties")
        if (appSigningKeysPropertiesFile.exists()) {
            appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
        }
    }

    Properties googlePlayUploadKeysProperties = new Properties()
    def googlePlayUploadKeysPropertiesFile = file("google-play-upload-keys.properties")
    if (googlePlayUploadKeysPropertiesFile.exists()) {
        googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
    } else {
        googlePlayUploadKeysPropertiesFile = file("../google-play-upload-keys.properties")
        if (googlePlayUploadKeysPropertiesFile.exists()) {
            googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
        }
    }

    def resValueFr = file("res/values-fr")

    defaultConfig {
        versionCode versionProperties['version.code'] as Integer
        versionName versionProperties['version.name']
        if (useGooglePlayUploadKeysProperties) {
            setProperty("archivesBaseName", "${projectName}_v${versionName}_r${versionCode}_upload")
        } else {
            setProperty("archivesBaseName", "${projectName}_v${versionName}_r${versionCode}")
        }
        if (resValueFr.exists()) {
            resConfigs "en", "fr"
        } else {
            resConfigs "en"
        }
        minSdkVersion rootProject.ext.minSdkVersion
        // minSdkVersion 21 // DEBUG avoid using legacy multidex
        targetSdkVersion rootProject.ext.targetSdkVersion
    }

    signingConfigs {
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    storeFile file(googlePlayUploadKeysProperties['key.store'])
                    storePassword googlePlayUploadKeysProperties['key.store.password']
                    keyAlias googlePlayUploadKeysProperties['key.alias']
                    keyPassword googlePlayUploadKeysProperties['key.alias.password']
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    storeFile file(appSigningKeysProperties['key.store'])
                    storePassword appSigningKeysProperties['key.store.password']
                    keyAlias appSigningKeysProperties['key.alias']
                    keyPassword appSigningKeysProperties['key.alias.password']
                }
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "_DEBUG"

            // testCoverageEnabled false // DEBUG skip coverage report
            shrinkResources false
            minifyEnabled false
            useProguard false
            aaptOptions.cruncherEnabled = false
        }
        //noinspection GroovyMissingReturnStatement
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            }

            shrinkResources false
            minifyEnabled false
            useProguard false
        }
    }

    //noinspection GroovyMissingReturnStatement
    lintOptions {
        abortOnError false
        checkDependencies true // also check leaf modules
        ignoreTestSources true
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            res.srcDirs += 'res-current'
            res.srcDirs += 'res-next'
            assets.srcDirs = ['assets']
        }
        test {
            java.srcDirs = ['srcTest']
            resources.srcDirs = ['srcTest']
        }
        androidTest {
            java.srcDirs = ['srcAndroidTest']
            resources.srcDirs = ['srcAndroidTest']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }

    def publish = project.tasks.create("copyReleaseApkToOutputDirs")
    publish.description "Copies release APK & AAB to output directory"
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            Properties customLocalProperties = new Properties()
            def customLocalPropertiesFile = file("../keys.properties")
            if (customLocalPropertiesFile.exists()) {
                customLocalProperties.load(new FileInputStream(file("../custom_local.properties")))
                def outputDir = customLocalProperties['output.dir']
                def outputCloudDir = customLocalProperties['output.cloud.dir']
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                        def copyToOutputDirTask = project.tasks.create("copyToOutputDir${variant.name}Apk", Copy)
                        def copyToOutputCloudDirTask = project.tasks.create("copyToOutputCloudDir${variant.name}Apk", Copy)
                        copyToOutputDirTask.from(output.outputFile)
                        copyToOutputCloudDirTask.from(output.outputFile)
                        copyToOutputDirTask.into(outputDir)
                        copyToOutputCloudDirTask.into(outputCloudDir)
                        copyToOutputDirTask.dependsOn variant.assemble
                        copyToOutputCloudDirTask.dependsOn variant.assemble
                        publish.dependsOn copyToOutputDirTask
                        publish.dependsOn copyToOutputCloudDirTask
                    } else if (output.outputFile != null && output.outputFile.name.endsWith('.aab')) {
                        def copyToOutputDirTask = project.tasks.create("copyToOutputDir${variant.name}Bundle", Copy)
                        def copyToOutputCloudDirTask = project.tasks.create("copyToOutputCloudDir${variant.name}Bundle", Copy)
                        copyToOutputDirTask.from(output.outputFile)
                        copyToOutputCloudDirTask.from(output.outputFile)
                        copyToOutputDirTask.into(outputDir)
                        copyToOutputCloudDirTask.into(outputCloudDir)
                        copyToOutputDirTask.dependsOn variant.assemble
                        copyToOutputCloudDirTask.dependsOn variant.assemble
                        publish.dependsOn copyToOutputDirTask
                        publish.dependsOn copyToOutputCloudDirTask
                    }
                }
            }
        }
    }
}
